{"version":3,"sources":["games/chess/client/Client.js","games/chess/client/Guest.js"],"names":["Container","children","flexDirection","alignItems","pt","EndGame","game","isMyTurn","text","in_stalemate","in_threefold_repetition","insufficient_material","in_checkmate","in_draw","fontSize","mt","mb","Client","orientation","state","moves","useState","validMoves","setValidMoves","Chess","board","isGameOver","game_over","turn","squareStyles","reduce","o","validMove","slice","boxShadow","draggable","calcWidth","screenWidth","screenHeight","Math","min","onDrop","sourceSquare","targetSquare","piece","isMyPeice","move","from","to","promotion","chessMove","onDragOverSquare","position","onSquareClick","square","find","Guest","props"],"mappings":"8LAKMA,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAChB,cAAC,OAAD,CAAMC,cAAc,SAASC,WAAW,SAASC,GAAG,IAApD,SAAyDH,KAGrDI,EAAU,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,EAAO,GAoBX,OAnBIF,EAAKG,iBACPD,EAAO,aAELF,EAAKI,4BACPF,EAAO,yBAELF,EAAKK,0BACPH,EAAO,yBAELF,EAAKM,iBAELJ,EADED,EACK,MAEA,QAGPD,EAAKO,YACPL,EAAO,QAGP,cAAC,OAAD,CAAMM,SAAU,EAAGC,GAAI,EAAGC,GAAI,EAA9B,SAAkCR,KAmEvBS,IA/DA,SAAC,GAAmC,IAAD,EAAhCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAAY,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAE1CjB,EAAO,IAAIkB,IAAML,EAAMM,OACvBC,EAAapB,EAAKqB,YAClBpB,EAAWD,EAAKsB,OAAO,KAAOV,EAAY,GAmC1CW,EAAeP,EAAWQ,QAAO,SAACC,EAAGC,GAIzC,OAHAD,EAAEC,EAAUC,OAAO,IAAM,CACvBC,UAAW,4BAENH,IACN,IAEH,OACE,eAAC/B,EAAD,WACG0B,GAAc,cAACrB,EAAD,CAASE,SAAUA,EAAUD,KAAMA,IAClD,cAAC,IAAD,CACE6B,WAAYT,GAAcnB,EAC1B6B,UA7BY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAChBC,KAAKC,IAAkB,GAAdH,EAAkC,GAAfC,IA6BxBpB,YAAaA,EACbuB,OA/CS,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,aAAcC,EAAY,EAAZA,MAC5CrB,EAAc,IACd,IAAMsB,EAAYD,EAAM,KAAO1B,EAAY,GAC3C,IAAIQ,GAAemB,GAActC,EAAjC,CAEA,IAAMuC,EAAOxC,EAAKwC,KAAK,CACrBC,KAAML,EACNM,GAAIL,EACJM,UAAW,MAIA,OAATH,GACJ1B,EAAM8B,UAAU,CAAEA,UAAWJ,MAmCzBK,iBAAkB,kBAAM5B,EAAc,KACtC6B,SAAQ,UAAEjC,EAAMM,aAAR,QAAiB,QACzB4B,cA9BgB,SAACC,GACrB,IAAI5B,GAAenB,EAAnB,CAEA,IAAMuC,EAAOxB,EAAWiC,MAAK,SAAAvB,GAAS,OAAIA,EAAUC,OAAO,KAAOqB,KAClE,GAAIR,EACF1B,EAAM8B,UAAU,CAAEA,UAAWJ,IAC7BvB,EAAc,QACT,CACL,IAAMH,EAAQd,EAAKc,MAAM,CAAEkC,WAC3B/B,EAAcH,MAsBZS,aAAcA,S,0ECnFP2B,UAND,SAACC,GACb,OACE,cAAC,IAAD,aAAQvC,YAAY,SAAYuC","file":"static/js/5.35590bc9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Chessboard from \"chessboardjsx\"\nimport Chess from 'chess.js';\nimport { Flex, Text } from \"rebass/styled-components\";\n\nconst Container = ({ children }) => (\n  <Flex flexDirection=\"column\" alignItems=\"center\" pt=\"1\">{children}</Flex>\n)\n\nconst EndGame = ({ game, isMyTurn }) => {\n  let text = \"\";\n  if (game.in_stalemate()) {\n    text = \"Stalemate\"\n  }\n  if (game.in_threefold_repetition()) {\n    text = \"Three-fold repetition\"\n  }\n  if (game.insufficient_material()) {\n    text = \"Infufficient Material\"\n  }\n  if (game.in_checkmate()) {\n    if (isMyTurn) {\n      text = \"Win\"\n    } else {\n      text = \"Lose\"\n    }\n  } \n  if (game.in_draw()) {\n    text = \"Draw\"\n  }\n  return (\n    <Text fontSize={5} mt={2} mb={3}>{text}</Text>\n  );\n};\n\nconst Client = ({ orientation, state, moves }) => {\n  const [validMoves, setValidMoves] = useState([]);\n  const game = new Chess(state.board);\n  const isGameOver = game.game_over();\n  const isMyTurn = game.turn()[0] === orientation[0]\n\n  const onDrop = ({ sourceSquare, targetSquare, piece }) => {\n    setValidMoves([])\n    const isMyPeice = piece[0] === orientation[0];\n    if (isGameOver || !isMyPeice || !isMyTurn) return;\n\n    const move = game.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: 'q' // always promote to a queen for example simplicity\n    });\n\n    // invalid move\n    if (move === null) return;\n    moves.chessMove({ chessMove: move })\n  }\n\n  const calcWidth = ({ screenWidth, screenHeight }) => (\n    Math.min(screenWidth * 0.9, screenHeight * 0.9)\n  );\n\n  const onSquareClick = (square) => {\n    if (isGameOver || !isMyTurn) return;\n\n    const move = validMoves.find(validMove => validMove.slice(-2) === square);\n    if (move) {\n      moves.chessMove({ chessMove: move })\n      setValidMoves([])\n    } else {\n      const moves = game.moves({ square });\n      setValidMoves(moves);\n    }\n  }\n\n  const squareStyles = validMoves.reduce((o, validMove) => {\n    o[validMove.slice(-2)] = {\n      boxShadow: \"yellow 0 0 1px 4px inset\",\n    };\n    return o;\n  }, {})\n\n  return (\n    <Container>\n      {isGameOver && <EndGame isMyTurn={isMyTurn} game={game}/>}\n      <Chessboard\n        draggable={!isGameOver && isMyTurn}\n        calcWidth={calcWidth}\n        orientation={orientation}\n        onDrop={onDrop}\n        onDragOverSquare={() => setValidMoves([])}\n        position={state.board ?? \"start\"}\n        onSquareClick={onSquareClick}\n        squareStyles={squareStyles}\n      />\n    </Container>\n  );\n};\n\nexport default Client;","import React from \"react\";\nimport Client from \"./Client\";\n\nconst Guest = (props) => {\n  return (\n    <Client orientation=\"white\" {...props} />\n  );\n};\n\nexport default Guest;"],"sourceRoot":""}