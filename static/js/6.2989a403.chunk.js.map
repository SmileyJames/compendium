{"version":3,"sources":["games/chess/client/Client.js","components/join-screen/JoinScreen.js","components/join-screen/index.js","games/chess/client/Host.js"],"names":["Container","children","flexDirection","alignItems","pt","EndGame","game","isMyTurn","text","in_stalemate","in_threefold_repetition","insufficient_material","in_checkmate","in_draw","fontSize","mt","mb","Client","orientation","state","moves","useState","validMoves","setValidMoves","Chess","board","isGameOver","game_over","turn","squareStyles","reduce","o","validMove","slice","boxShadow","draggable","calcWidth","screenWidth","screenHeight","Math","min","onDrop","sourceSquare","targetSquare","piece","isMyPeice","move","from","to","promotion","chessMove","onDragOverSquare","position","onSquareClick","square","find","roomCodeToUrl","roomCode","window","location","host","roomCodeToHref","protocol","TextRoomCode","py","variant","ScanRoomCode","m","value","LinkRoomCode","my","href","FullWidthColumn","justifyContent","width","HalfWidthColumn","JoinScreen","flexWrap","Host","props","connections","length","roomId"],"mappings":"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","file":"static/js/6.2989a403.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Chessboard from \"chessboardjsx\"\nimport Chess from 'chess.js';\nimport { Flex, Text } from \"rebass/styled-components\";\n\nconst Container = ({ children }) => (\n  <Flex flexDirection=\"column\" alignItems=\"center\" pt=\"1\">{children}</Flex>\n)\n\nconst EndGame = ({ game, isMyTurn }) => {\n  let text = \"\";\n  if (game.in_stalemate()) {\n    text = \"Stalemate\"\n  }\n  if (game.in_threefold_repetition()) {\n    text = \"Three-fold repetition\"\n  }\n  if (game.insufficient_material()) {\n    text = \"Infufficient Material\"\n  }\n  if (game.in_checkmate()) {\n    if (isMyTurn) {\n      text = \"Win\"\n    } else {\n      text = \"Lose\"\n    }\n  } \n  if (game.in_draw()) {\n    text = \"Draw\"\n  }\n  return (\n    <Text fontSize={5} mt={2} mb={3}>{text}</Text>\n  );\n};\n\nconst Client = ({ orientation, state, moves }) => {\n  const [validMoves, setValidMoves] = useState([]);\n  const game = new Chess(state.board);\n  const isGameOver = game.game_over();\n  const isMyTurn = game.turn()[0] === orientation[0]\n\n  const onDrop = ({ sourceSquare, targetSquare, piece }) => {\n    setValidMoves([])\n    const isMyPeice = piece[0] === orientation[0];\n    if (isGameOver || !isMyPeice || !isMyTurn) return;\n\n    const move = game.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: 'q' // always promote to a queen for example simplicity\n    });\n\n    // invalid move\n    if (move === null) return;\n    moves.chessMove({ chessMove: move })\n  }\n\n  const calcWidth = ({ screenWidth, screenHeight }) => (\n    Math.min(screenWidth * 0.9, screenHeight * 0.9)\n  );\n\n  const onSquareClick = (square) => {\n    if (isGameOver || !isMyTurn) return;\n\n    const move = validMoves.find(validMove => validMove.slice(-2) === square);\n    if (move) {\n      moves.chessMove({ chessMove: move })\n      setValidMoves([])\n    } else {\n      const moves = game.moves({ square });\n      setValidMoves(moves);\n    }\n  }\n\n  const squareStyles = validMoves.reduce((o, validMove) => {\n    o[validMove.slice(-2)] = {\n      boxShadow: \"yellow 0 0 1px 4px inset\",\n    };\n    return o;\n  }, {})\n\n  return (\n    <Container>\n      {isGameOver && <EndGame isMyTurn={isMyTurn} game={game}/>}\n      <Chessboard\n        draggable={!isGameOver && isMyTurn}\n        calcWidth={calcWidth}\n        orientation={orientation}\n        onDrop={onDrop}\n        onDragOverSquare={() => setValidMoves([])}\n        position={state.board ?? \"start\"}\n        onSquareClick={onSquareClick}\n        squareStyles={squareStyles}\n      />\n    </Container>\n  );\n};\n\nexport default Client;","import Heading from \"components/heading\";\nimport Paragraph from \"components/paragraph\";\nimport { Flex, Box, Link } from \"rebass/styled-components\";\nimport QRCode from \"qrcode.react\";\n\nconst roomCodeToUrl = (roomCode) => (\n  `${window.location.host}/#/guest/${roomCode}`\n);\n\nconst roomCodeToHref = (roomCode) => (\n  `${window.location.protocol}//${roomCodeToUrl(roomCode)}`\n);\n\nconst TextRoomCode = ({ roomCode }) => (\n  <>\n    <Heading py={3} variant=\"secondary\">{roomCode}</Heading>\n    <Paragraph>Enter this room code on the home page</Paragraph>\n  </>\n)\n\nconst ScanRoomCode = ({ roomCode }) => (\n  <>\n    <Box m={1}>\n      <QRCode value={roomCodeToHref(roomCode)}/>\n    </Box>\n    <Paragraph>Scan this QR code</Paragraph>\n  </>\n)\n\nconst LinkRoomCode = ({ roomCode }) => (\n  <>\n    <Paragraph my={2}>\n      <Link href={roomCodeToHref(roomCode)}>{roomCodeToUrl(roomCode)}</Link>\n    </Paragraph>\n    <Paragraph>\n      Follow this link\n    </Paragraph>\n  </>\n);\n\nconst FullWidthColumn = ({ children }) => (\n  <Flex my={3} flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\" width={1}>\n    {children}\n  </Flex>\n);\n\nconst HalfWidthColumn = ({ children }) => (\n  <Flex py={2} flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\" width={[1, 1/2]}>\n    {children}\n  </Flex>\n);\n\nfunction JoinScreen({ roomCode, ...props }) {\n  return (\n    <Flex flexWrap=\"wrap\">\n      <FullWidthColumn>\n        <Heading mt={3}>How to join the game</Heading>\n      </FullWidthColumn>\n      <HalfWidthColumn>\n        <TextRoomCode roomCode={roomCode}/>\n      </HalfWidthColumn>\n      <HalfWidthColumn>\n        <ScanRoomCode roomCode={roomCode}/>\n      </HalfWidthColumn>\n      <FullWidthColumn>\n        <LinkRoomCode roomCode={roomCode}/>\n      </FullWidthColumn>\n    </Flex>\n  );\n}\n\nexport default JoinScreen;","import JoinScreen from \"./JoinScreen\";\nexport default JoinScreen;","import React from \"react\";\nimport Client from \"./Client\";\nimport JoinScreen from \"components/join-screen\"\n\nconst Host = (props) => {\n  if (props.connections.length < 1) {\n    return (\n      <JoinScreen roomCode={props.roomId}/>\n    )\n  }\n\n  return (\n    <Client orientation=\"black\" {...props} />\n  );\n};\n\nexport default Host;"],"sourceRoot":""}